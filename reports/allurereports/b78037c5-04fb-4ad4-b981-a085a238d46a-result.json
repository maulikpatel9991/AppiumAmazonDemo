{"name": "test_6AddToCart", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <pages.AddcartPage.AddtocartPageTest object at 0x000002CBB30132E0>, locatorValue = 'a-autoid-0', locatorType = 'id'\n\n    def getElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n>           element = self.waitForElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.AddcartPage.AddtocartPageTest object at 0x000002CBB30132E0>, locatorvalue = 'a-autoid-0', locatorType = 'id'\n\n    def waitForElement(self, locatorvalue, locatorType):\n        locatorType = locatorType.lower()\n        element = None\n        wait = WebDriverWait(self.driver, 25, poll_frequency=1,\n                             ignored_exceptions=[ElementNotVisibleException, ElementNotSelectableException,\n                                                 NoSuchElementException])\n        if locatorType == \"id\":\n>           element = wait.until(lambda x: x.find_element(AppiumBy.ID, locatorvalue))\n\n..\\base\\BasePage.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"89e41556-0728-4508-b2a2-392f77b12171\")>\nmethod = <function BasePage.waitForElement.<locals>.<lambda> at 0x000002CBB30121F0>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       NoSuchElementError: An element could not be located on the page using the given search parameters.\nE           at AndroidUiautomator2Driver.findElOrEls (C:\\Program Files\\Appium Server GUI\\resources\\app\\node_modules\\appium\\node_modules\\appium-android-driver\\lib\\commands\\find.js:75:11)\nE           at processTicksAndRejections (internal/process/task_queues.js:85:5)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:87: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pages.AddcartPage.AddtocartPageTest object at 0x000002CBB30132E0>, locatorValue = 'a-autoid-0', locatorType = 'id'\n\n    def clickElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n>           element = self.getElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.AddcartPage.AddtocartPageTest object at 0x000002CBB30132E0>, locatorValue = 'a-autoid-0', locatorType = 'id'\n\n    def getElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n            element = self.waitForElement(locatorValue, locatorType)\n            self.log.info(\"Element found with LocatorType: \" + locatorType + \" with the locatorValue :\" + locatorValue)\n        except:\n            self.log.info(\n                \"Element not found with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:59: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.EndtoEndTest.EndtoEndTest testMethod=test_6AddToCart>\n\n    @pytest.mark.run(order=6)\n    def test_6AddToCart(self):\n        self.ad.clickaddtocartButton()\n        self.ad.clickcartButton()\n>       self.ad.clickprocessbuyButton()\n\nEndtoEndTest.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\pages\\AddcartPage.py:25: in clickprocessbuyButton\n    self.clickElement(self._proceedbuyButton,\"id\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.AddcartPage.AddtocartPageTest object at 0x000002CBB30132E0>, locatorValue = 'a-autoid-0', locatorType = 'id'\n\n    def clickElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n            element = self.getElement(locatorValue, locatorType)\n            element.click()\n            self.log.info(\n                \"Clicked on Element with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n        except:\n            self.log.info(\n                \"Unable to click on Element with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:74: AssertionError"}, "steps": [{"name": "Click addtocard button", "status": "passed", "start": 1653735152545, "stop": 1653735152545}, {"name": "click cart Button", "status": "passed", "start": 1653735159636, "stop": 1653735159636}], "attachments": [{"name": "id", "source": "027c4144-6225-4d85-b950-1618f0173cba-attachment.png", "type": "image/png"}, {"name": "id", "source": "2a4b3539-bb1b-43e3-a5d5-629d640e67bb-attachment.png", "type": "image/png"}, {"name": "log", "source": "84794b84-4676-4adb-ad1b-332c6af83a4f-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "2cfadb14-1473-4fe7-8996-6f4f01ded158-attachment.txt", "type": "text/plain"}], "start": 1653735151634, "stop": 1653735188452, "uuid": "17b0531a-fa5e-443f-a5c8-cdb25fe4cc36", "historyId": "4154b2f2afd376125ac6773d92f57466", "testCaseId": "e988984021d10c07a1bb964e9420af23", "fullName": "EndtoEndTest.EndtoEndTest#test_6AddToCart", "labels": [{"name": "tag", "value": "run(order=6)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('beforeClass', 'beforeMethod')"}, {"name": "suite", "value": "EndtoEndTest"}, {"name": "subSuite", "value": "EndtoEndTest"}, {"name": "host", "value": "BTZVBK3"}, {"name": "thread", "value": "14960-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "EndtoEndTest"}]}